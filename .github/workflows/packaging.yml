name: Package Java Application

on:
  push:
    branches:
      - main
      - dev
      - feature-branch

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Package for Linux (DEB)
        run: |
          jpackage --input target/ --name FlippingGame --main-jar FlippingGame.jar --type deb --dest output/

      - name: Package for Linux (RPM)
        run: |
          jpackage --input target/ --name FlippingGame --main-jar FlippingGame.jar --type rpm --dest output/

      - name: Upload Linux packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: output/

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Package for Windows
        run: |
          jpackage --input target/ --name FlippingGame --main-jar FlippingGame.jar --type msi --dest output/

      - name: Upload Windows package
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: output/

  create-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from pom.xml
        id: extract_version
        run: |
          version=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('pom.xml'); root = tree.getroot(); print(root.find('{http://maven.apache.org/POM/4.0.0}version').text)")
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create or Update GitHub Release
        id: create_release
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const tagExists = process.env.TAG_EXISTS === 'true';
            const version = process.env.VERSION;
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN);

            if (tagExists) {
              const releases = await octokit.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const release = releases.data.find(r => r.tag_name === `v${version}`);

              if (release) {
                await octokit.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  tag_name: `v${version}`,
                  name: `Release v${version}`,
                  draft: false,
                  prerelease: false,
                });
              }
            } else {
              await octokit.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `v${version}`,
                name: `Release v${version}`,
                draft: false,
                prerelease: false,
              });
            }

      - name: Upload Linux DEB package to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/FlippingGame.deb
          asset_name: FlippingGame.deb
          asset_content_type: application/x-deb

      - name: Upload Linux RPM package to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/FlippingGame.rpm
          asset_name: FlippingGame.rpm
          asset_content_type: application/x-rpm

      - name: Upload Windows MSI package to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: output/FlippingGame.msi
          asset_name: FlippingGame.msi
          asset_content_type: application/x-msi
